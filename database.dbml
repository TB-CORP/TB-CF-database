Project "TB-CF-database" {
    database_type: 'SQL'
}

// Groups

TableGroup user_group {
    user
    profile
    auth_source
    chat
    user_auth_source
    user_chat
    user_gig
}

TableGroup payment_group {
    payment_log
    payme.transaction
    click.transaction
}

TableGroup gig_group {
    gig
    category
}

TableGroup lookup_group {
    role
    permission
    language
    currency
    status
    role_permission
}

// Relationships: user_group

Ref: user.id - profile.user_id [delete: cascade, update: cascade]
Ref: user.id - user_auth_source.user_id [delete: cascade, update: cascade]
Ref: user.id < payment_log.user_id [delete: restrict, update: cascade]
Ref: user.id < chat.user_id [delete: restrict, update: cascade]
Ref: user.id < user_chat.user_id [delete: restrict, update: cascade]
Ref: user.id < user_gig.user_id [delete: restrict, update: cascade]
Ref: user.id < gig.user_id [delete: restrict, update: cascade]
Ref: chat.id < user_chat.chat_id [delete: cascade, update: cascade]

// Relationships: payment_group

Ref: payment_log.id < payme.transaction.payment_log_id [delete: restrict, update: cascade]
Ref: payment_log.id < click.transaction.payment_log_id [delete: restrict, update: cascade]

// Relationships: gig_group

Ref: gig.id < user_gig.gig_id [delete: restrict, update: cascade]
Ref: category.id < gig.category_id [delete: restrict, update: cascade]

// Relationships: lookup_group

Ref: role.id < profile.role_id [delete: set null, update: cascade]
Ref: role.id < role_permission.role_id [delete: cascade, update: cascade]
Ref: permission.id < role_permission.permission_id [delete: cascade, update: cascade]
Ref: currency.id < gig.currency_id [delete: restrict, update: cascade]
Ref: currency.id < payment_log.currency_id [delete: restrict, update: cascade]
Ref: status.id < user.status_id [delete: restrict, update: cascade]
Ref: status.id < user_gig.status_id [delete: restrict, update: cascade]
Ref: status.id < payment_log.status_id [delete: restrict, update: cascade]
Ref: auth_source.id < user_auth_source.auth_source_id [delete: restrict, update: cascade]

// Tables: user_group

Table user {
    id int [pk, increment]
    auth_key varchar(32)
    password_hash varchar(255)
    created_at int [default: `UNIX_TIMESTAMP()`]
    updated_at int [default: 0]
    verification_token varchar(255) [unique, not null]

    status_id int [not null]

    Note: 'All people who interact with the platform are users.'
}

Table profile {
    id int [pk, increment]
    first_name varchar(40) [not null]
    middle_name varchar(40)
    last_name varchar(40)
    email varchar(100)
    avatar varchar(255)
    resource varchar(255) [not null]
    
    user_id int [not null]
    role_id int [Note: 'Null is a default user']

    indexes {
        (first_name, middle_name, last_name) [name: 'full_name']
        email [name: 'email']
    }

    Note: 'Additional user data and role assignments.'
}

Table auth_source {
    id int [pk, increment]
    code smallint [unique, not null]
    name varchar(40) [unique, not null]

    Note: 'Information about third party authorization sources.'
}

Table chat {
    id int [pk, increment]
    created_at int [default: `UNIX_TIMESTAMP()`]
    updated_at int [default: 0]
    
    user_id int [not null, Note: 'Chat creator']

    indexes {
        created_at [name: 'created_at']
    }

    Note: 'Information about chat sessions.'
}

Table user_auth_source {
    user_id int [not null]
    auth_source_id int [not null]
    source_user_id varchar(255) [Note: 'User ID on the source']

    indexes {
        (source_user_id, user_id) [pk]
        source_user_id [name: 'source_user_id']
    }

    Note: 'User and third party authorization sources relationship.'
}

Table user_chat {
    user_id int [not null]
    chat_id int [not null]
    created_at int [default: `UNIX_TIMESTAMP()`]
    updated_at int [default: 0]
    message text(1000) [not null]

    indexes {
        created_at [name: 'created_at']
    }

    Note: 'User and chat session relationship.'
}

Table user_gig {
    user_id int [not null]
    gig_id int [not null]
    created_at int [default: `UNIX_TIMESTAMP()`]
    updated_at int [default: 0]
    rating decimal(3,2) [default: 0.00, Note: '0 is the lowest, 1 is the highest']
    
    status_id int [not null]

    indexes {
        (user_id, gig_id) [pk]
        created_at [name: 'created_at']
        rating [name: 'rating']
    }
    
    Note: 'User and gig relationship.'
}

// Tables: payment_group

Table payment_log {
    id int [pk, increment]
    amount int [not null]
    currency_id int [not null]
    created_at int [default: `UNIX_TIMESTAMP()`]
    updated_at int [default: 0]

    user_id int [not null]
    gig_id int [not null]
    status_id int [not null]

    indexes {
        created_at [name: 'created_at']
    }

    Note: 'General information about payment transactions.'
}

Table payme.transaction {
    id int [pk, increment]
    paycom_transaction_id varchar(25) [not null]
    paycom_time int [not null]
    created_at int [default: `UNIX_TIMESTAMP()`]
    performed_at int [default: 0]
    canceled_at int [default: 0]
    amount int [not null]
    status tinyint(2) [not null]
    reason tinyint(2)
    receivers varchar(500) [Note: 'JSON array of receivers']

    payment_log_id int

    indexes {
    status [name: 'status']
    }

    Note: 'Information about Payme (payme.uz) transactions.'
}

Table click.transaction {
    id int [pk, increment]
    click_transaction_id bigint [not null]
    status varchar(50) [not null]
    status_note varchar(250)
    created_at int [default: `UNIX_TIMESTAMP()`]
    updated_at int [default: 0]
    currency varchar(3) [not null, default: 'UZB']
    total decimal(10,2) [default: 0.00, not null]
    amount decimal(10,2) [default: 0.00, not null]
    delivery decimal(10,2) [default: 0.00, not null]
    tax decimal(10,2) [default: 0.00, not null]
    token varchar(50) [not null]

    payment_log_id int

    indexes {
        status [name: 'status']
    }

    Note: 'Information about Click (click.uz) transactions.'
}

// Tables: gig_group

Table gig {
    id int [pk, increment]
    title varchar(400) [not null]
    description text(5000)
    resource varchar(255) [not null]
    price int [default: 0, not null, Note: '0 is free']

    user_id int [not null, Note: 'Gig author']
    category_id int [not null]
    currency_id int [not null]

    indexes {
        title [name: 'title']
        price [name: 'price']
    }

    Note: 'Information about gigs (offers).'
}

Table category {
    id int [pk, increment]
    name varchar(100) [not null]
    description varchar(1000)

    indexes {
        name [name: 'name']
    }

    Note: 'Information about categories.'
}

// Tables: lookup_group

Table role {
    id int [pk, increment]
    code smallint [unique, not null]
    name varchar(80) [unique, not null]
    description varchar(500)

    Note: 'Privileges and responsibilities for certain users.'
}

Table permission {
    id int [pk, increment]
    code smallint [unique, not null]
    name varchar(80) [unique, not null]
    description varchar(500)

    Note: 'Permissions to be assigned to specific roles.'
}

Table language {
    id int [pk, increment]
    name varchar(80) [not null]
    local_name varchar(120) [not null]
    iso_639_1 varchar(2) [unique, not null]

    Note: 'Information about languages.'
}

Table currency {
    id int [pk, increment]
    country varchar(80) [unique, not null]
    name varchar(40) [unique, not null]
    local_name varchar(40) [not null]
    iso_4217 varchar(3) [unique, not null]

    Note: 'Information about currencies.'
}

Table status {
    id int [pk, increment]
    code smallint [unique, not null]
    name varchar(40) [unique, not null]
    description varchar(500)

    Note: 'Status shows current state of an entity.'
}

Table role_permission {
    role_id int [not null]
    permission_id int [not null]

    indexes {
        (role_id, permission_id) [pk]
    }

    Note: 'Role and permission relationship.'
}